                                     GRADER

Name of student running submit:
Login of student running submit:

Second team member's name:
Second team member's login:

Third team member's name (if any):
Third team member's login:

IMPORTANT:  Once you've submitted Project 2 once, the same team member should
submit always.  If a different teammate must submit, inform cs61b@cory.eecs of
all the details.  Include a complete list of team members, and let us know
which submission you want graded.

If you've submitted your project once, or even written a substantial amount of
code together, you may not change partners without the permission of the
instructor.
===============================================================================
Does your program compile without errors?


Have you tested your program on the machines in the Soda CS 61B lab?


Did you successfully implement game tree search?  Did you successfully
implement alpha-beta pruning?  Are there any limitations on it?  What is the
default number of search levels set by the one-parameter MachinePlayer
constructor?


Describe your board evaluation function in some detail.


Does your MachinePlayer use any special method of choosing the first few moves?



Is there anything else the graders should know to help them read your project?



Describe the classes, modules, and interfaces you designed before and while you
implemented the project.  Your description should include:
  -  A list of the classes your program uses.
  -  A list of each of the "modules" used in or by MachinePlayer, similar to
     the list in the "Teamwork" section of the README (but hopefully more
     detailed).
  -  For each module, list the class(es) the module is implemented in.
  -  For each module, say which of your team members implemented it.
  -  For each module, describe its interface--specifically, the prototype and
     behavior of each method that is available for external callers (outside
     the module) to call.  Don't include methods that are only meant to be
     called from within the module.

     For each method, provide (1) a method prototype and (2) a complete,
     unambiguous description of the behavior of the method/module.  This
     description should also appear before the method in your code's comments.

You will probably need to change some of your design decisions as you go; be
sure to modify this file to reflect these changes before you submit your
project.  Your design of classes and interfaces with be worth about 10% of your
grade.

Modules:

    1. Determining whether a move is valid
        See MoveHelper class - isValid() function
    
    2. Finding the best move/ performing minimax tree search
        See GameTree class - chooseMove() function
    
    3. Generating a list of legal moves
        See GameTree class - getLegalMoves() function

    4. Determining whether there is a network
        See the isNetwork() in the MoveSequence class

    5. Finding chips that form connections
        MoveSequence class and getMoveSequence()

Classes:

MoveHelper (singleton class) (Paymon)

	// returns if this is a valid move 
	public static boolean isValid(Move m)

	// constructs the MoveSequence that m is in
	public static MoveSequence getMoveSequence(Move m)

	
MoveSequence extends List (Dana) 

	// creates a MoveSequence starting with start
	public MoveSequence(Move start) 

	// returns true if the m is successfully added
	// overrides add(Move m) from List
	public boolean add(Move m)

	// returns true if this MoveSequence is a network
	public boolean isNetwork()


GameBoard (Paymon)

	// the color of the player that owns this board
	private int playerColor
	
	// hold lists of the current moves of each player
	private List<Move> playerMoves, oppMoves;

	// creates the game board
	public GameBoard(List<Move> playerMoves, List<Move> oppMoves, int playerColor)
	
	// adds a move under the current player's color
	public Move addMove(Move m)

	// adds an opponent's move
	public Move addOpponentMove(Move m)
	
	// calculate the current score of this board
	public int evaluate()


MachinePlayer (Paymon)

	private GameTree currentTree
	private GameBoard board;


GameTree (Dana)

	private GameBoard currentBoard
	private int searchDepth
	
	public BestMove chooseMove(boolean side, int alpha, int beta)

        public List<Move> getLegalMoves()        


BestMove (Dana)

	public Move move;
	public double score;
	
